/*
 * This file is generated by jOOQ.
 */
package net.lavedrine.jooq.generated.tables;


import java.time.Instant;
import java.util.function.Function;

import net.lavedrine.homestock.configuration.jooq.utils.InstantConverter;
import net.lavedrine.jooq.generated.Keys;
import net.lavedrine.jooq.generated.Public;
import net.lavedrine.jooq.generated.tables.records.HomeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JHome extends TableImpl<HomeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.home</code>
     */
    public static final JHome HOME = new JHome();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HomeRecord> getRecordType() {
        return HomeRecord.class;
    }

    /**
     * The column <code>public.home.id</code>.
     */
    public final TableField<HomeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.home.name</code>.
     */
    public final TableField<HomeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.home.date_created</code>.
     */
    public final TableField<HomeRecord, Instant> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>public.home.last_updated</code>.
     */
    public final TableField<HomeRecord, Instant> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new InstantConverter());

    private JHome(Name alias, Table<HomeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JHome(Name alias, Table<HomeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.home</code> table reference
     */
    public JHome(String alias) {
        this(DSL.name(alias), HOME);
    }

    /**
     * Create an aliased <code>public.home</code> table reference
     */
    public JHome(Name alias) {
        this(alias, HOME);
    }

    /**
     * Create a <code>public.home</code> table reference
     */
    public JHome() {
        this(DSL.name("home"), null);
    }

    public <O extends Record> JHome(Table<O> child, ForeignKey<O, HomeRecord> key) {
        super(child, key, HOME);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<HomeRecord> getPrimaryKey() {
        return Keys.PK_HOME_ID;
    }

    @Override
    public JHome as(String alias) {
        return new JHome(DSL.name(alias), this);
    }

    @Override
    public JHome as(Name alias) {
        return new JHome(alias, this);
    }

    @Override
    public JHome as(Table<?> alias) {
        return new JHome(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JHome rename(String name) {
        return new JHome(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JHome rename(Name name) {
        return new JHome(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JHome rename(Table<?> name) {
        return new JHome(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Instant, Instant> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super Instant, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
