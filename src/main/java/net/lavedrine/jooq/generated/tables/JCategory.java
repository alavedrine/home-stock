/*
 * This file is generated by jOOQ.
 */
package net.lavedrine.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import net.lavedrine.jooq.generated.Keys;
import net.lavedrine.jooq.generated.Public;
import net.lavedrine.jooq.generated.tables.records.CategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCategory extends TableImpl<CategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.category</code>
     */
    public static final JCategory CATEGORY = new JCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryRecord> getRecordType() {
        return CategoryRecord.class;
    }

    /**
     * The column <code>public.category.id</code>.
     */
    public final TableField<CategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.category.parent_id</code>.
     */
    public final TableField<CategoryRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.category.home_id</code>.
     */
    public final TableField<CategoryRecord, Integer> HOME_ID = createField(DSL.name("home_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.category.name</code>.
     */
    public final TableField<CategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.category.description</code>.
     */
    public final TableField<CategoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private JCategory(Name alias, Table<CategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCategory(Name alias, Table<CategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.category</code> table reference
     */
    public JCategory(String alias) {
        this(DSL.name(alias), CATEGORY);
    }

    /**
     * Create an aliased <code>public.category</code> table reference
     */
    public JCategory(Name alias) {
        this(alias, CATEGORY);
    }

    /**
     * Create a <code>public.category</code> table reference
     */
    public JCategory() {
        this(DSL.name("category"), null);
    }

    public <O extends Record> JCategory(Table<O> child, ForeignKey<O, CategoryRecord> key) {
        super(child, key, CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CategoryRecord, Integer> getIdentity() {
        return (Identity<CategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CategoryRecord> getPrimaryKey() {
        return Keys.PK_CATEGORY_ID;
    }

    @Override
    public List<ForeignKey<CategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CATEGORY__FK_PARENT_CATEGORY_ID, Keys.CATEGORY__FK_HOME_ID);
    }

    private transient JCategory _category;
    private transient JHome _home;

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    public JCategory category() {
        if (_category == null)
            _category = new JCategory(this, Keys.CATEGORY__FK_PARENT_CATEGORY_ID);

        return _category;
    }

    /**
     * Get the implicit join path to the <code>public.home</code> table.
     */
    public JHome home() {
        if (_home == null)
            _home = new JHome(this, Keys.CATEGORY__FK_HOME_ID);

        return _home;
    }

    @Override
    public JCategory as(String alias) {
        return new JCategory(DSL.name(alias), this);
    }

    @Override
    public JCategory as(Name alias) {
        return new JCategory(alias, this);
    }

    @Override
    public JCategory as(Table<?> alias) {
        return new JCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCategory rename(String name) {
        return new JCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCategory rename(Name name) {
        return new JCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCategory rename(Table<?> name) {
        return new JCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
